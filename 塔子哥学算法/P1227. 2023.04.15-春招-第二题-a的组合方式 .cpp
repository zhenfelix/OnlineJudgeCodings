// 题目内容

// 在音乐创作过程中，有一种常见的技巧叫做“和声”。和声是指通过组合多个音符的声音来产生更加丰富的音乐效果。在和声中，相邻的音符通常被组合成和弦，而和弦的构成方式与音符的间隔密切相关。

// 假设在一首音乐作品中，有一段旋律由 nn 个音符组成，每个音符的音高由一个正整数表示。作曲家希望为这段旋律添加一些和声，以产生更加丰富的音乐效果。为了实现这个目标，他们想要找到一组和弦，使得这组和弦的构成方式与旋律的音符间隔完全匹配。

// 为了帮助作曲家实现这个目标，你需要编写一个程序来计算出可能的音符数组 aa 的组合方式数目。给定一个长度为 n−1n−1 的和弦数组 bb，你的任务是计算出可能的音符数组 aa 的组合方式数目。其中，和弦数组 bb 中的每个元素 b[i]=a[i]+a[i+1]b[i]=a[i]+a[i+1] 。

// 作曲家们知道，在音乐中，和弦的构成方式是非常丰富多样的。因此，他们希望通过这个程序来快速地计算出所有可能的音符数组 aa 的组合方式数目，以便在创作过程中进行参考。
// 输入描述

// 第一行输出为一个整数 n(1≤n≤1e5)n(1≤n≤1e5) 。

// 第二行输出为 n−1n−1 个整数，第 ii 个整数为 bi(1≤bi≤1e9)bi​(1≤bi​≤1e9) 。
// 输出描述

// 输出为一个整数，表示数组 aa 有多少种可能。
// 样例1

// 输入

// 3
// 2 2

// 输出

// 1

// 样例解释

// 可以构造序列:a={1,1,1}a={1,1,1}
// 样例2

// 输入

// 3
// 2 1

// 输出

// 0

// 样例解释

// 注意a,ba,b 之间的关系以及aa必须为正整数
// 样例3

// 输入

// 4
// 12 34 236

// 输出

// 11


#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n-1);
    for (int i = 0; i < n; i++) cin >> arr[i];
    int lo = 1, hi = 1000000000;
    for (int i = n-2; i >= 0; i--) {
        int mi = max(1,arr[i]-hi);
        int mx = arr[i]-lo;
        lo = mi, hi = mx;
        if (lo > hi) break;
        
    }
    if (lo > hi) cout << 0 << endl;
    else cout << hi-lo+1 << endl;
    return 0;
}

// 2023.04.08-美团春招-第三题-玩具打包
// 题目内容

// 塔子哥开的玩具店生意越来越好，每天都有很多客人前来选购玩具。有一天，他接到了一个大单，客户想购买 nn 个玩具，并且要求打包成多个玩具袋。塔子哥精心为客户挑选了 nn 个玩具，并且将它们编号为 1,2,…,n1,2,…,n。

// 然而，塔子哥发现这个订购单还有一个要求：每个玩具袋最多只能装 mm 个玩具，并且同一个玩具袋里装的玩具编号必须是连续的。玩具袋的成本与容积成线性关系。

// 为了解决这个问题，他决定采用样本中点估计的方法来计算玩具袋的容积。具体来说，如果一个玩具袋中装的最大的玩具容积是 uu，最小的是 vv，那么这个玩具袋的成本就是 k×floor((u+v)/2)+sk×floor((u+v)/2)+s，其中 kk 是玩具袋中装入玩具的个数，ss 是一个常数， floor(x)floor(x) 是下取整函数，比如 floor(3.8)=3floor(3.8)=3 ， floor(2)=2floor(2)=2

// 客户并没有规定玩具袋的数量，但是希望玩具袋的成本越小越好，毕竟买玩具就很贵了。请求出塔子哥打包这 nn 个玩具所用的最小花费。
// 输入描述

// 第一行三个正整数 n,m,sn,m,s 。意义如题面所示

// 第二行 nn 个正整数 a1,a2,...,ana1​,a2​,...,an​ ，表示每个玩具的体积。

// 对于全部数据, 1≤n≤1041≤n≤104 ， 1≤m≤1031≤m≤103 ， m≤nm≤n ， 1≤ai,s≤1041≤ai​,s≤104 。
// 输出描述

// 输出一个整数，表示打包这 nn 个玩具玩具袋的最小成本。
// 样例

// 输入

// 6 4 3
// 1 4 5 1 4 1

// 输出

// 21

// 样例解释

// 前三个玩具装成一个玩具袋，后三个玩具装成一个玩具袋。

#include<bits/stdc++.h>
using namespace std;
using ll = long long;

int main(){
    int n,m,s;
    cin >> n >> m >> s;
    vector<int> arr(n);
    for (auto &x : arr) cin >> x;
    vector<ll> dp(n+1,1e9);
    dp[0] = 0;
    for (int i = 1; i <= n; i++){
        ll mx = 0, mi = 1e9;
        for (int j = 1; j <= m; j++){
            if (i-j < 0) break;
            mx = max(mx,(ll)arr[i-j]);
            mi = min(mi,(ll)arr[i-j]);
            dp[i] = min(dp[i],dp[i-j]+j*((mx+mi)/2)+s);
        }
    }
    cout << dp[n] << endl;
    return 0;
}
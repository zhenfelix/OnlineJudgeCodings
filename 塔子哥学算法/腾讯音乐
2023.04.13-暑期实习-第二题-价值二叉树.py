
# 2023.04.13-暑期实习-第二题-价值二叉树
# 题目内容

# 塔子哥是一位著名的计算机科学家，在一次采集森林中的植物时，偶然发现了一棵非常特殊的树。这棵树是一棵二叉树，其节点上都标有不同的数字。

# 在细心观察后，塔子哥意识到这棵二叉树是由多个相同的子树组成的，每个子树的根节点都是同一个数字。他对这个发现感到非常兴奋，并且开始研究如何计算这些子树的价值。

# 他定义每个节点的价值为其子树节点乘积的末尾 00 的数量。因此，如果一个节点的子树中有 kk 个数末尾带有 00，那么该节点的价值为 kk。

# 塔子哥想编写一个程序来计算每个节点的价值，以便能够更好地研究这棵树的特性。他请求您的帮助来实现这个程序，您需要返回一棵二叉树，树的结构和给定的二叉树相同，将每个节点的权值替换为该节点的价值。

# 二又树节点数不超过 105105 。

# 二又树每个节点的权值都是不超过 109109 的正整数。
# 输入描述

# 第一行为一个整数 nn ，表示这棵树的节点个数。

# 第二行为 nn 个整数，第 ii 个整数为 aiai​ ，表示这 nn 个节点的取值。

# 接下来的 n−1n−1 行，每行输入两个正整数 uu 和 vv ，代表节点 uu 和节点 vv 有一条边相连。 根为11

# 1≤n≤1051≤n≤105 ， 1≤ai≤1091≤ai​≤109 。
# 输出描述

# 输出一行 nn 个正整数，分别代表 11 号节点到 nn 号节点，每个节点的子树权值乘积尾零的数量。
# 样例

# 输入

# 5
# 2 5 10 4 5
# 1 2
# 1 3
# 3 4
# 3 5

# 输出

# 3 0 2 0 0


from collections import * 
n=int(input())
ws=list(map(int,input().split()))
g = defaultdict(list)
for _ in range(n-1):
    x,y = list(map(int,input().split()))
    x -= 1
    y -= 1
    g[x].append(y)
    g[y].append(x)

dp = [[0]*2 for _ in range(n)]
def check(i):
    v = ws[i]
    while v%2 == 0:
        dp[i][0] += 1
        v //= 2
    while v%5 == 0:
        dp[i][1] += 1
        v //= 5 
    return
def dfs(cur,pre):
    check(cur) 
    for nxt in g[cur]:
        if nxt == pre: continue
        dfs(nxt,cur) 
        dp[cur][0] += dp[nxt][0]
        dp[cur][1] += dp[nxt][1]
    return 
dfs(0,0)
print(*[min(a,b) for a,b in dp])

# 题目描述

# 塔子哥是一位火车车厢调度员。

# 这一天，一列带有 nn 个编号车厢的列车进站了，编号为 1~nn 。但是，这些车厢的编号并不是按从左到右递增的顺序，为了后面的工作方便展开，塔子哥想把火车调整成从左到右递增的顺序，即 [1，2，3，……n] ，但他只能进行一种操作：首先他要在火车中任意选择两个车厢取出。然后他将两个车厢中较大的放在火车的最右边，较小的放在火车的最左边。

# 他可以进行无限次这样的操作，他想知道最少需要多少次才能将火车调整为从左到右递增的顺序。
# 输入描述

# 第一行是数组的长度： nn . 第二行有n个数字 pipi​ (i=1,2,3,…,ni=1,2,3,…,n) 表示从左到右的车厢编号。( 1≤n≤50000,1≤pi≤n1≤n≤50000,1≤pi​≤n )
# 输出描述

# 输出一个整数，表示最少需要操作多少次。
# 样例

# 样例输入

# 7
# 1 3 5 2 4 6 7

# 样例输出

# 3

# 样例说明

# 第一步选择5，3，第二步选2，6，第三步选1，7。

n = int(input())
arr = list(map(int,input().split()))
ps = [-1]*(n+1)
for i, v in enumerate(arr):
    ps[v] = i 
ans = 0
l = r = (n+1)//2
flag = True
if n%2 == 0:
    if r+1 <= n and ps[r+1] >= ps[l]:
        r += 1
    else:
        print(n//2)
        flag = False 
while flag and l-1 >= 1 and r+1 <= n and ps[r+1] >= ps[r] and ps[l-1] <= ps[l]:
    r += 1
    l -= 1
if flag:
    print((n-(r-l+1))//2)
